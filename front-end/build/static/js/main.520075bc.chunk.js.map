{"version":3,"sources":["redux/darkModeSlice.js","Components/Navbar/Navbar.js","Components/Backdrop/Backdrop.js","Components/Sidebar/Sidebar.js","Components/Product/Product.js","Components/CartItem/CartItem.js","Components/Footer/Footer.js","redux/constants/productConstants.js","Screens/HomeScreen/HomeScreen.js","redux/actions/productActions.js","redux/constants/cartConstatnts.js","redux/actions/cartActions.js","Screens/ProductScreen/ProductScreen.js","Screens/CartScreen/CartScreen.js","GlobalStyles.js","App.js","redux/store.js","redux/reducers/cartReduces.js","redux/reducers/productReducers.js","index.js"],"names":["darkModeSlice","createSlice","name","initialState","value","reducers","setDark","state","actions","selectDarkMode","darkMode","Navbar","click","cartItems","useSelector","cart","dark","dispatch","useDispatch","className","to","reduce","qty","item","Number","onClick","Backdrop","toggleShow","Sidebar","sideBarClass","push","join","Product","imageUrl","price","description","productId","src","alt","substring","CartItem","qtyHandleChange","handleRemoveFromCart","product","onChange","e","target","Array","countInStock","keys","map","opt","Footer","GET_PRODUCTS_REQUESTS","GET_PRODUCTS_SUCCESS","GET_PRODUCTS_FAIL","GET_PRODUCT_DETAILS_REQUESTS","GET_PRODUCT_DETAILS_SUCCESS","GET_PRODUCT_DETAILS_FAIL","GET_PRODUCT_DETAILS_RESET","HomeScreen","getProducts","products","loading","error","useEffect","a","type","actionTypes","axios","get","data","payload","response","message","_id","ADD_TO_CART","REMOVE_FROM_CART","addToCart","id","getState","localStorage","setItem","JSON","stringify","ProductScreen","match","history","useState","setQty","productDetails","getProductDetails","params","CartScreen","removeFromCart","length","toFixed","GlobalStyles","createGlobalStyle","App","setToggleShow","exact","path","component","reducer","combineReducers","action","existItem","find","x","filter","darkModeReducer","middleware","thunk","INITIAL_STATE","getItem","parse","store","createStore","composeWithDevTools","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.520075bc.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const darkModeSlice = createSlice({\r\n    name: 'darkMode',\r\n    initialState: {\r\n        value: false,\r\n    },\r\n    reducers: {\r\n        setDark: state => {\r\n            state.value = !state.value;\r\n        }\r\n    },\r\n});\r\n\r\nexport const { setDark } = darkModeSlice.actions;\r\n\r\nexport const selectDarkMode = state => state.darkMode.value;\r\n\r\nexport default darkModeSlice.reducer;","import { Link } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport \"./Navbar.css\";\r\nimport { selectDarkMode } from \"../../redux/darkModeSlice\";\r\nimport { setDark } from \"../../redux/darkModeSlice\";\r\n\r\nconst Navbar = ({ click }) => {\r\n    const cart = useSelector(state => state.cart);\r\n    const { cartItems } = cart;\r\n    const dark = useSelector(selectDarkMode);\r\n    const dispatch = useDispatch();\r\n\r\n    const getCartCount = () => {\r\n        return cartItems.reduce((qty, item) => qty + Number(item.qty), 0);\r\n    };\r\n\r\n    const darker = () => dispatch(setDark());\r\n\r\n    return (\r\n        <nav className={`navbar ${dark && 'navbar__dark'}`}>\r\n            <div className=\"navbar__logo\">\r\n                <h2>MERN Shopping Cart</h2>\r\n            </div>\r\n\r\n            <ul className=\"navbar__links\">\r\n                <li>\r\n                    <Link to=\"/\">\r\n                        Shop\r\n                    </Link>\r\n                </li>\r\n                <li>\r\n                    <Link to=\"/cart\" className=\"cart__link\">\r\n                        <span>\r\n                            <i className=\"fas fa-shopping-cart\"></i>\r\n                        </span>\r\n                        Cart\r\n                        <span className=\"cartLogo__badge\">{getCartCount()}</span>\r\n                    </Link>\r\n                </li>\r\n                <li>\r\n                    <button className=\"navBTN\" onClick={darker}>Dark Mode</button>\r\n                </li>\r\n            </ul>\r\n\r\n            <div className=\"hamburger__menu\" onClick={click}>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n            </div>\r\n        </nav>\r\n    );\r\n};\r\n\r\nexport default Navbar;\r\n","import \"./Backdrop.css\";\r\n\r\nconst Backdrop = ({ toggleShow, click }) => {\r\n    return toggleShow && <div className=\"backdrop\" onClick={click}></div>;\r\n};\r\n\r\nexport default Backdrop;\r\n","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { selectDarkMode } from \"../../redux/darkModeSlice\";\r\nimport { setDark } from \"../../redux/darkModeSlice\";\r\nimport \"./Sidebar.css\";\r\n\r\nconst Sidebar = ({ toggleShow, click }) => {\r\n    const sideBarClass = ['sidebar'];\r\n    const cart = useSelector(state => state.cart);\r\n    const { cartItems } = cart;\r\n    const dark = useSelector(selectDarkMode);\r\n    const dispatch = useDispatch();\r\n\r\n    if (toggleShow) {\r\n        sideBarClass.push('toggleShow');\r\n    };\r\n\r\n    const getCartCount = () => {\r\n        return cartItems.reduce((qty, item) => qty + Number(item.qty), 0);\r\n    };\r\n\r\n    const darker = () => dispatch(setDark());\r\n\r\n    return (\r\n        <div className={`${sideBarClass.join(\" \")} ${dark && \"sidebar__dark\"}`}>\r\n            <ul className=\"sidebar__links\" onClick={click}>\r\n                <li>\r\n                    <Link to=\"/cart\">\r\n                        <i className=\"fas fa-shopping-cart\"></i>\r\n                        <span>\r\n                            Cart <span className=\"sidebar__cartBadge\">{getCartCount()}</span>\r\n                        </span>\r\n                    </Link>\r\n                </li>\r\n                <li>\r\n                    <Link to=\"/\">Shop</Link>\r\n                </li>\r\n                <li>\r\n                    <button className=\"darkmodeBTN\" onClick={darker}>Dark Mode</button>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Sidebar;\r\n","import { Link } from \"react-router-dom\";\r\nimport \"./Product.css\";\r\n\r\nconst Product = ({\r\n    imageUrl,\r\n    name,\r\n    price,\r\n    description,\r\n    productId,\r\n    darkMode\r\n}) => {\r\n    return (\r\n        <div className={`product ${darkMode && 'product__dark'}`}>\r\n            <img src={imageUrl} alt={name} />\r\n\r\n            <div className=\"product__info\">\r\n                <p className=\"info__name\">{name}</p>\r\n                <p className=\"info__descripton\">{description.substring(0, 100)}...</p>\r\n                <p className=\"info__price\">${price}</p>\r\n\r\n                <Link\r\n                    to={`/product/${productId}`}\r\n                    className={`info__button ${darkMode && 'info__button__dark'}`}\r\n                >\r\n                    View\r\n                </Link>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Product;\r\n","import { useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { selectDarkMode } from \"../../redux/darkModeSlice\";\r\nimport \"./CartItem.css\";\r\n\r\nconst CartItem = ({ item, qtyHandleChange, handleRemoveFromCart }) => {\r\n    const dark = useSelector(selectDarkMode);\r\n    \r\n    return (\r\n        <div className={`cartItem ${dark && 'cartItem__dark'}`}>\r\n            <Link to={`/products/${item.product}`} className=\"cartItem__image\">\r\n                <img src={item.imageUrl} alt={item.name} />\r\n            </Link>\r\n            <Link to={`/products/${item.product}`} className=\"cartItem__name\">\r\n                <p>{item.name}</p>\r\n            </Link>\r\n            <p className=\"cartItem__price\">${item.price}</p>\r\n            <select\r\n                className=\"cartItem__select\"\r\n                value={item.qty}\r\n                onChange={(e) => qtyHandleChange(item.product, e.target.value)}\r\n            >\r\n                {[...Array(item.countInStock).keys()].map(opt => (\r\n                    <option key={opt + 5} value={opt + 1}>{opt + 1}</option>\r\n                ))}\r\n            </select>\r\n\r\n            <button\r\n                className=\"cartItem__deleteButton\"\r\n                onClick={() => handleRemoveFromCart(item.product)}\r\n            >\r\n                <i className=\"fas fa-trash\"></i>\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CartItem;\r\n","import \"./Footer.css\";\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <div className=\"footer\">\r\n            <h5>MERN Shopping Cart</h5>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Footer;\r\n","export const GET_PRODUCTS_REQUESTS = \"GET_PRODUCTS_REQUESTS\";\r\nexport const GET_PRODUCTS_SUCCESS = \"GET_PRODUCTS_SUCCESS\";\r\nexport const GET_PRODUCTS_FAIL = \"GET_PRODUCTS_FAIL\";\r\n\r\nexport const GET_PRODUCT_DETAILS_REQUESTS = \"GET_PRODUCT_DETAILS_REQUESTS\";\r\nexport const GET_PRODUCT_DETAILS_SUCCESS = \"GET_PRODUCT_DETAILS_SUCCESS\";\r\nexport const GET_PRODUCT_DETAILS_FAIL = \"GET_PRODUCT_DETAILS_FAIL\";\r\nexport const GET_PRODUCT_DETAILS_RESET = \"GET_PRODUCT_DETAILS_RESET\";","import { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Product } from \"../../Components\";\r\nimport { getProducts as listProducts } from \"../../redux/actions/productActions\";\r\nimport { selectDarkMode } from \"../../redux/darkModeSlice\";\r\nimport \"./HomeScreen.css\";\r\n\r\nconst HomeScreen = () => {\r\n    const dispatch = useDispatch();\r\n    const getProducts = useSelector(state => state.getProducts);\r\n    const dark = useSelector(selectDarkMode);\r\n    const {\r\n        products,\r\n        loading,\r\n        error\r\n    } = getProducts;\r\n\r\n    useEffect(() => {\r\n        dispatch(listProducts());\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <div className=\"homescreen\">\r\n            <h2 className={`homescreen__title ${dark && 'homescreen__title__dark'}`}>Latest Products</h2>\r\n\r\n            <div className=\"homescreen__products\">\r\n                {loading\r\n                    ? <h2>Spinner...</h2>\r\n                    : error\r\n                        ? <h2>{error}</h2>\r\n                        : products.map(product => (\r\n                            <Product\r\n                                darkMode={dark}\r\n                                key={product._id}\r\n                                imageUrl={product.imageUrl}\r\n                                name={product.name}\r\n                                price={product.price}\r\n                                description={product.description}\r\n                                productId={product._id}\r\n                            />\r\n                        ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default HomeScreen;\r\n","import axios from \"axios\";\r\nimport * as actionTypes from \"../constants/productConstants\";\r\n\r\nexport const getProducts = () => async (dispatch) => {\r\n    try {\r\n        dispatch({\r\n            type: actionTypes.GET_PRODUCTS_REQUESTS,\r\n        });\r\n        \r\n        const { data } = await axios.get(\"/api/products\");\r\n\r\n        dispatch({\r\n            type: actionTypes.GET_PRODUCTS_SUCCESS,\r\n            payload: data\r\n        })\r\n    } catch (error) {\r\n        dispatch({\r\n            type: actionTypes.GET_PRODUCTS_FAIL,\r\n            payload: error.response && error.response.data.message\r\n            ? error.response.data.message\r\n            : error.message\r\n        })\r\n    };\r\n};\r\n\r\nexport const getProductDetails = (id) => async (dispatch) => {\r\n    try {\r\n        dispatch({\r\n            type: actionTypes.GET_PRODUCT_DETAILS_REQUESTS,\r\n        });\r\n        \r\n        const { data } = await axios.get(`/api/products/${id}`);\r\n\r\n        dispatch({\r\n            type: actionTypes.GET_PRODUCT_DETAILS_SUCCESS,\r\n            payload: data\r\n        })\r\n    } catch (error) {\r\n        dispatch({\r\n            type: actionTypes.GET_PRODUCT_DETAILS_FAIL,\r\n            payload: error.response && error.response.data.message\r\n            ? error.response.data.message\r\n            : error.message\r\n        })\r\n    };\r\n};\r\n\r\nexport const removeProductDetails = () => (dispatch) => {\r\n    dispatch({ type: actionTypes.GET_PRODUCT_DETAILS_RESET });\r\n}","export const ADD_TO_CART = \"ADD_TO_CART\";\r\nexport const REMOVE_FROM_CART = \"REMOVE_FROM_CART\";\r\nexport const CART_RESET = \"CART_RESET\";","import axios from \"axios\";\r\nimport * as actionTypes from \"../constants/cartConstatnts\";\r\n\r\nexport const addToCart = (id, qty) => async (dispatch, getState) => {\r\n    const { data } = await axios.get(`/api/products/${id}`);\r\n\r\n    dispatch({\r\n        type: actionTypes.ADD_TO_CART,\r\n        payload: {\r\n            product: data._id,\r\n            name: data.name,\r\n            imageUrl: data.imageUrl,\r\n            countInStock: data.countInStock,\r\n            price: data.price,\r\n            qty\r\n        }\r\n    });\r\n\r\n    localStorage.setItem('cart', JSON.stringify(getState().cart.cartItems));\r\n};\r\n\r\nexport const removeFromCart = (id) => (dispatch, getState) => {\r\n    dispatch({\r\n        type: actionTypes.REMOVE_FROM_CART,\r\n        payload: id\r\n    });\r\n\r\n    localStorage.setItem('cart', JSON.stringify(getState().cart.cartItems));\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { getProductDetails } from \"../../redux/actions/productActions\";\r\nimport { addToCart } from \"../../redux/actions/cartActions\";\r\nimport { selectDarkMode } from \"../../redux/darkModeSlice\";\r\nimport \"./ProductScreen.css\";\r\n\r\nconst ProductScreen = ({ match, history }) => {\r\n    const [qty, setQty] = useState(1);\r\n    const dispatch = useDispatch();\r\n    const productDetails = useSelector(state => state.getProductDetails);\r\n    const dark = useSelector(selectDarkMode);\r\n    const {\r\n        loading,\r\n        error,\r\n        product\r\n    } = productDetails;\r\n\r\n    useEffect(() => {\r\n        if (product && match.params.id !== product._id) {\r\n            dispatch(getProductDetails(match.params.id));\r\n        }\r\n    }, [dispatch, product, match]);\r\n\r\n    const handleAddToCart = () => {\r\n        dispatch(addToCart(product._id, qty));\r\n        history.push(\"/cart\");\r\n    }\r\n\r\n    return (\r\n        <div className={`productscreen ${dark && 'productscreen__dark'}`}>\r\n            {loading\r\n                ? <h2>Spinner...</h2>\r\n                : error\r\n                    ? <h2>{error}</h2>\r\n                    : (\r\n                        <>\r\n                            <div className=\"productscreen__left\">\r\n                                <div className=\"left__image\">\r\n                                    <img src={product.imageUrl} alt={product.name} />\r\n                                </div>\r\n                                <div className=\"left__info\">\r\n                                    <p className=\"left__name\">{product.name}</p>\r\n                                    <p className=\"left__price\">${product.price}</p>\r\n                                    <p className=\"left__description\">{product.description}</p>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"productscreen__right\">\r\n                                <div className=\"right__info\">\r\n                                    <p>\r\n                                        Price: <span>${product.price}</span>\r\n                                    </p>\r\n                                    <p>\r\n                                        Status: <span>{\r\n                                            product.countInStock > 0 ? \"In Stock\" : \"Out Of Stock\"\r\n                                        }</span>\r\n                                    </p>\r\n                                    <p>\r\n                                        QTY:\r\n                                        <select\r\n                                            value={qty}\r\n                                            onChange={e => setQty(e.target.value)}\r\n                                        >\r\n                                            {[...Array(product.countInStock).keys()]\r\n                                                .map(opt => (\r\n                                                    <option key={opt + 5} value={opt + 1}>{opt + 1}</option>\r\n                                                ))}\r\n                                        </select>\r\n                                    </p>\r\n                                    <p>\r\n                                        <button\r\n                                            onClick={handleAddToCart}\r\n                                            type=\"button\"\r\n                                            className=\"right__button\"\r\n                                        >\r\n                                            Add To Cart\r\n                                        </button>\r\n                                    </p>\r\n                                </div>\r\n                            </div>\r\n                        </>\r\n                    )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProductScreen;\r\n","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { CartItem } from \"../../Components\";\r\nimport { addToCart, removeFromCart } from \"../../redux/actions/cartActions\";\r\nimport { selectDarkMode } from \"../../redux/darkModeSlice\";\r\nimport \"./CartScreen.css\";\r\n\r\nconst CartScreen = () => {\r\n    const dispatch = useDispatch();\r\n    const cart = useSelector(state => state.cart);\r\n    const { cartItems } = cart;\r\n    const dark = useSelector(selectDarkMode);\r\n\r\n    const qtyHandleChange = (id, qty) => {\r\n        dispatch(addToCart(id, qty));\r\n    };\r\n\r\n    const handleRemoveFromCart = (id) => {\r\n        dispatch(removeFromCart(id));\r\n    };\r\n\r\n    const getCartCount = () => {\r\n        return cartItems.reduce((qty, item) => Number(item.qty) + qty, 0);\r\n    };\r\n\r\n    const getCartSubTotal = () => {\r\n        return cartItems.reduce((price, item) => (item.price * item.qty) + price, 0);\r\n    };\r\n\r\n    return (\r\n        <div className={`cartscreen ${dark && 'cartscreen__dark'}`}>\r\n            <div className=\"cartscreen__left\">\r\n                <h2>Shopping Cart</h2>\r\n                {cartItems.length === 0 ? (\r\n                    <div className={`${dark && 'darkCartScreenText'}`}>\r\n                        Your cart is empty\r\n                        <Link to=\"/\" className=\"back__button\">\r\n                            Back to Shop\r\n                        </Link>\r\n                    </div>\r\n                ) : cartItems.map(item => (\r\n                    <CartItem\r\n                        key={item.countInStock + 150 + item.imageUrl}\r\n                        item={item}\r\n                        qtyHandleChange={qtyHandleChange}\r\n                        handleRemoveFromCart={handleRemoveFromCart}\r\n                    />\r\n                ))}\r\n            </div>\r\n            <div className=\"cartscreen__right\">\r\n                <div className=\"cartscreen__info\">\r\n                    <p>Subtotal ({getCartCount()}) items</p>\r\n                    <p>${getCartSubTotal().toFixed(2)}</p>\r\n                </div>\r\n                <div className=\"cartscreen__button\">\r\n                    <button>Proceed To Checkout</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CartScreen;\r\n","import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyles = createGlobalStyle`\r\n* {\r\n    padding: 0;\r\n    margin: 0;\r\n    box-sizing: border-box;\r\n  }\r\n  \r\n  body {\r\n    margin: 0;\r\n    font-family: Arial, Helvetica, sans-serif;\r\n    background: ${({dark}) => dark ? '#272b34' : '#f4f4f4'};\r\n    transition: background 0.5s ease-in;\r\n  }\r\n  \r\n  img {\r\n    width: 100%;\r\n    object-fit: contain;\r\n  }\r\n  \r\n`;","import { useState } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { CartScreen, HomeScreen, ProductScreen } from \"./Screens\";\nimport { Backdrop, Footer, Navbar, Sidebar } from \"./Components\";\nimport './App.css';\nimport { GlobalStyles } from \"./GlobalStyles\";\nimport { selectDarkMode } from \"./redux/darkModeSlice\";\nimport { useSelector } from \"react-redux\";\n\nfunction App() {\n  const [toggleShow, setToggleShow] = useState(false);\n  const dark = useSelector(selectDarkMode);\n\n  return (\n    <Router>\n      <GlobalStyles dark={dark} />\n      <Navbar click={() => setToggleShow(true)} />\n      <Sidebar click={() => setToggleShow(false)} toggleShow={toggleShow} />\n      <Backdrop click={() => setToggleShow(false)} toggleShow={toggleShow} />\n      <main>\n        <Switch>\n          <Route exact path=\"/\" component={HomeScreen} />\n          <Route exact path=\"/product/:id\" component={ProductScreen} />\n          <Route exact path=\"/cart\" component={CartScreen} />\n        </Switch>\n      </main>\n      <Footer />\n    </Router>\n  );\n}\n\nexport default App;\n","import { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport thunk from \"redux-thunk\";\r\nimport { cartReducer } from \"./reducers/cartReduces\";\r\nimport { getProductsReducer, getProductDetailsReducer } from \"./reducers/productReducers\";\r\nimport darkModeReducer from \"./darkModeSlice\";\r\n\r\nconst reducer = combineReducers({\r\n    cart: cartReducer,\r\n    getProducts: getProductsReducer,\r\n    getProductDetails: getProductDetailsReducer,\r\n    darkMode: darkModeReducer\r\n});\r\n\r\nconst middleware = [thunk];\r\n\r\nconst cartFromLocalStorage = localStorage.getItem('cart') ? JSON.parse(localStorage.getItem('cart')) : [];\r\n\r\nconst INITIAL_STATE = {\r\n    cart: {\r\n        cartItems: cartFromLocalStorage\r\n    }\r\n}\r\n\r\nconst store = createStore(\r\n    reducer,\r\n    INITIAL_STATE,\r\n    composeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store;","import * as actionTypes from \"../constants/cartConstatnts\";\r\n\r\nexport const cartReducer = (state = { cartItems: [] }, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.ADD_TO_CART:\r\n            const item = action.payload;\r\n            const existItem = state.cartItems.find((x) => x.product === item.product);\r\n\r\n            if (existItem) {\r\n                return {\r\n                    ...state,\r\n                    cartItems: state.cartItems.map(\r\n                        (x) => x.product === existItem.product ? item : x\r\n                    )\r\n                };\r\n            } else {\r\n                return {\r\n                    ...state,\r\n                    cartItems: [...state.cartItems, item]\r\n                };\r\n            }\r\n\r\n        case actionTypes.REMOVE_FROM_CART:\r\n            return {\r\n                ...state,\r\n                cartItems: state.cartItems.filter((x) => x.product !== action.payload)\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    };\r\n};","import * as actionTypes from \"../constants/productConstants\";\r\n\r\nexport const getProductsReducer = (state = { products: [] }, action) => {\r\n    switch(action.type) {\r\n        case actionTypes.GET_PRODUCTS_REQUESTS:\r\n            return {\r\n                loading: true,\r\n                products: []\r\n            }\r\n        case actionTypes.GET_PRODUCTS_SUCCESS:\r\n            return {\r\n                loading: false,\r\n                products: action.payload\r\n            }\r\n        case actionTypes.GET_PRODUCTS_FAIL:\r\n            return {\r\n                loading: false,\r\n                error: action.payload\r\n            }\r\n            default:\r\n                return state\r\n    };\r\n};\r\n\r\nexport const getProductDetailsReducer = (state = { product: {} }, action) => {\r\n    switch(action.type) {\r\n        case actionTypes.GET_PRODUCT_DETAILS_REQUESTS:\r\n            return {\r\n                loading: true,\r\n            }\r\n        case actionTypes.GET_PRODUCT_DETAILS_SUCCESS:\r\n            return {\r\n                loading: false,\r\n                product: action.payload\r\n            }\r\n        case actionTypes.GET_PRODUCT_DETAILS_FAIL:\r\n            return {\r\n                loading: false,\r\n                error: action.payload\r\n            }\r\n        case actionTypes.GET_PRODUCT_DETAILS_RESET:\r\n            return {\r\n                product: {}\r\n            }\r\n        default:\r\n            return state;\r\n    };\r\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}